#!/bin/bash
MIPS_CC='mips-linux-gnu-gcc'
MIPS_OBJCOPY='mips-linux-gnu-objcopy'
MIPS_OBJDUMP='mips-linux-gnu-objdump'
MIPS_CPPFLAGS='-W -Wall -O3 -fno-builtin -march=mips1 -mfp32'
MIPS_LDFLAGS='-nostdlib -Wl,-melf32btsmip -march=mips1 -nostartfiles -mno-check-zero-division -Wl,--gpsize=0 -static -Wl,-Bstatic -Wl,--build-id=none'

TESTS='test/bin/*.bin'
DATA='test/data.csv'
OUTPUT_FILE='test/results.csv'
IO_DATA='test/io.csv'
OUT_CAPTURE='test/out_capture.csv'

rm $OUTPUT_FILE
echo ""TestId","Instruction","Status","Author","Message","ExpectedCode","ReturnCode"" >> $OUTPUT_FILE
printf "%-10s | %-12s | %-10s | %-10s | %-35s\n" "TestId" "Instruction" "Status" "Author" "Message"

COUNT=2

for i in $TESTS
do
  TEST_NAME=${i##*/}
  TEST_NAME=${TEST_NAME%*.mips.bin}

  IO_NAME=${TEST_NAME:0:5}
  IO_NUM=${TEST_NAME#input*}
  IO_NUM=$((IO_NUM+1))

  IO_NAME1=${TEST_NAME:0:6}
  IO_NUM1=${TEST_NAME#output*}
  IO_NUM1=$((IO_NUM1+1))

  STDOUT_OK="True"

  if [[ "$IO_NAME" = "input" ]]
  then
    eval IO_LINE=($(sed "${IO_NUM}q;d" $IO_DATA))
    IFS=',' read -r -a IO_ARRAY <<< "$IO_LINE"
    INPUT_IO="${IO_ARRAY[0]}"

    ./bin/mips_simulator $i <<< "$INPUT_IO"
    RETCODE=$?
  elif [[ "$IO_NAME1" = "output" ]]
  then
    OUT_CAPTURE="$(./bin/mips_simulator $i)"
    RETCODE=$?

    eval IO_LINE1=($(sed "${IO_NUM1}q;d" $IO_DATA))
    IFS=',' read -r -a IO_ARRAY1 <<< "$IO_LINE1"
    OUTPUT_IO="${IO_ARRAY1[2]}"

    if [[ "$OUT_CAPTURE" = "$OUTPUT_IO" ]]
    then
      STDOUT_OK="True"
    else
      STDOUT_OK="False"
    fi
  else
    ./bin/mips_simulator $i
    RETCODE=$?
  fi

  eval LINE=($(sed "${COUNT}q;d" $DATA))
  IFS=',' read -r -a ARRAY <<< "$LINE"
  COUNT=$((COUNT+1))

  TEST_NAME_READ="${ARRAY[0]}"
  INSTRUCTION="${ARRAY[1]}"
  EXPECTED="${ARRAY[2]}"
  AUTHOR="${ARRAY[3]}"
  MESSAGE="${ARRAY[4]}"

  if [[ "$RETCODE" = "$EXPECTED" ]] && [[ "$STDOUT_OK" = "True" ]]
  then
    echo "$TEST_NAME,$INSTRUCTION,"Pass",$AUTHOR,$MESSAGE,$EXPECTED,$RETCODE" >> $OUTPUT_FILE
    printf "%-10s | %-12s | %-10s | %-10s | %-35s\n" "$TEST_NAME" "$INSTRUCTION" "Pass" "$AUTHOR" "$MESSAGE"
    #echo "$TEST_NAME" Pass""
  else
    echo "$TEST_NAME,$INSTRUCTION,"Fail",$AUTHOR,$MESSAGE,$EXPECTED,$RETCODE" >> $OUTPUT_FILE
    printf "%-10s | %-12s | %-10s | %-10s | %-35s\n" "$TEST_NAME" "$INSTRUCTION" "Fail" "$AUTHOR" "$MESSAGE"
    #echo "$TEST_NAME" Fail Expected "$EXPECTED" Returned "$RETCODE"
  fi

done
