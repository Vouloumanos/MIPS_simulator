#!/bin/bash
MIPS_CC='mips-linux-gnu-gcc'
MIPS_OBJCOPY='mips-linux-gnu-objcopy'
MIPS_OBJDUMP='mips-linux-gnu-objdump'
MIPS_CPPFLAGS='-W -Wall -O3 -fno-builtin -march=mips1 -mfp32'
MIPS_LDFLAGS='-nostdlib -Wl,-melf32btsmip -march=mips1 -nostartfiles -mno-check-zero-division -Wl,--gpsize=0 -static -Wl,-Bstatic -Wl,--build-id=none'

TESTS='test/bin/*.bin'
DATA='test/data.csv'
OUTPUT_FILE='test/results.csv'
IO='test/io.txt'

rm $OUTPUT_FILE
echo ""TestId","Instruction","Status","Author","Message","ExpectedCode","ReturnCode"" >> $OUTPUT_FILE

COUNT=2

for i in $TESTS
do
  TEST_NAME=${i##*/}
  TEST_NAME=${TEST_NAME%*.mips.bin}
  #echo $TEST_NAME
  IO_NAME=${TEST_NAME:0:5}
  echo $IO_NAME

  if [[ "$TEST_NAME" = "input0" ]]
  then
    ./bin/mips_simulator $i <<< h
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input10" ]]
  then
    ./bin/mips_simulator $i <<< e
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input11" ]]
  then
    ./bin/mips_simulator $i <<< e
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input1" ]]
  then
    ./bin/mips_simulator $i <<< h
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input2" ]]
  then
    ./bin/mips_simulator $i <<< h
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input3" ]]
  then
    ./bin/mips_simulator $i <<< h
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input4" ]]
  then
    ./bin/mips_simulator $i
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input5" ]]
  then
    ./bin/mips_simulator $i
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input6" ]]
  then
    ./bin/mips_simulator $i
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input7" ]]
  then
    ./bin/mips_simulator $i <<< a
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input8" ]]
  then
    ./bin/mips_simulator $i <<< e
    RETCODE=$?
  elif [[ "$TEST_NAME" = "input9" ]]
  then
    ./bin/mips_simulator $i <<< e
    RETCODE=$?
  else
    ./bin/mips_simulator $i
    RETCODE=$?
  fi

  eval LINE=($(sed "${COUNT}q;d" $DATA))
  IFS=',' read -r -a ARRAY <<< "$LINE"
  COUNT=$((COUNT+1))

  TEST_NAME_READ="${ARRAY[0]}"
  #echo $TEST_NAME_READ
  INSTRUCTION="${ARRAY[1]}"
  EXPECTED="${ARRAY[2]}"
  AUTHOR="${ARRAY[3]}"
  MESSAGE="${ARRAY[4]}"

  if [[ "$RETCODE" = "$EXPECTED" ]]
  then
    echo "$TEST_NAME,$INSTRUCTION,"Pass",$AUTHOR,$MESSAGE,$EXPECTED,$RETCODE" >> $OUTPUT_FILE
    #echo "$TEST_NAME,$INSTRUCTION,"Pass",$AUTHOR,$MESSAGE,$EXPECTED,$RETCODE"
    echo "$TEST_NAME" Pass""
  else
    echo "$TEST_NAME,$INSTRUCTION,"Fail",$AUTHOR,$MESSAGE,$EXPECTED,$RETCODE" >> $OUTPUT_FILE
    #echo "$TEST_NAME,$INSTRUCTION,"Fail",$AUTHOR,$MESSAGE,$EXPECTED,$RETCODE"
    echo "$TEST_NAME" Fail Expected "$EXPECTED" Returned "$RETCODE"
  fi

done

#print CSV to STDOUT
